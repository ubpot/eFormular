INSERT INTO `Formular` (`id`, `html`, `title`, `version`, `prevVersion`, `nextVersion`, `editor`) VALUES (1438, '<form class="eFormular">\n  <h1>\n    Demonstrationsformular 1.0</h1>\n  <p>\n    In diesem Formular wird eine erste Einf&uuml;hrung gegeben, um den Aufbau und die Nutzung eines eFormular zu verstehen.</p>\n  <h2>\n    Aufbau</h2>\n  <p>\n    Ein eFormular ist ein HTML-Formular. Um es als eFormular zu kennzeichnen, bekommt das form-Tag in dem Attribut class den Wert eFormular zugewiesen.<br />\n    <br />\n    Code:<br />\n    <code> &lt;form class=&quot;eFormular&quot;&gt;<br />\n    &lt;/form&gt; </code></p>\n  <p>\n    In einem eFormular k&ouml;nnen alle Eingabelemente f&uuml;r HTML-Formulare genutzt werden.<br />\n    <br />\n    Textfeld:<br />\n    <input id="ef_Demoform1_Textfeld" /></p>\n  <p>\n    Textarea :<br />\n    <textarea cols="50" rows="3"></textarea></p>\n  <p>\n    Auswahllisten:<br />\n    <select size="1"><option>1</option><option>2</option></select></p>\n  <p>\n    &nbsp;</p>\n  <p>\n    Radiobutton:<br />\n    <input name="rad1" type="radio" /> 1 <input name="rad1" type="radio" /> 2</p>\n  <p>\n    &nbsp;</p>\n  <p>\n    Checkbox:<br />\n    <input type="checkbox" /> erledigt</p>\n  <p>\n    &nbsp;</p>\n  <p>\n    Datepicker:</p>\n  <p>\n    <input disabled="disabled" id="dc_date" name="dc_date" size="10" /><button id="f_trigger_b" type="reset">...</button><script type="text/javascript">        Calendar.setup({            inputField     :    "dc_date",      /* id of the input field*/             ifFormat       :    "%Y-%m-%d",       /* format of the input field */             showsTime      :    false,            /* will display a time selector*/             button         :    "f_trigger_b",   /* trigger for the calendar (button ID)*/             singleClick    :   true,           /* double-click mode*/                    step           :    1                      });    </script></p>\n  <h2>\n    Nutzung</h2>\n  <p>\n    In dem geöffneten eFormular können die Daten in den Eingabefeldern eingetragen werden. Zum Sichern des Formulars auf &quot;Formular speichern&quot; klicken. Bei jedem Speichern wird eine neue Version des Formulars gespeichert. Um später nachzuvollziehen, wer welche Änderung durchgeführt hat, wird für jede Version der Name des Bearbeiters gespeichert. Durch die Versionen kann man vor und zurück navigieren.</p>\n</form>\n', 'Demoform 1', 6, 387, NULL, 'Marco Winkler');
INSERT INTO `Formular` (`id`, `html`, `title`, `version`, `prevVersion`, `nextVersion`, `editor`) VALUES (1437, '<form class="eFormular">     \n  <h1> Demonstrationsformular 2</h1> \n  <p>       Dieses Formular ist ein kleiner Laufzettel (Workflow), der ohne Workflowkomponente realisiert wird.  </p>\n  <div>       \n    <big> Vorgang 1 </big>\n    <select id="eF_Vorgang1">         \n      <option id="eF_Vorgang1_inBearbeitung"> in Bearbeitung </option> \n      <option id="eF_Vorgang1_erledigt"> erledigt </option>      \n    </select>     \n    <p style="border: solid thin black;padding:4px;">       Schritt 1       \n      <select id="eF_Vorgang1_schritt1">         \n        <option id="eF_Vorgang1_schritt1_unerledigt"> unerledigt </option>    \n        <option id="eF_Vorgang1_schritt1_uebersprungen"> uebersprungen </option>  \n        <option id="eF_Vorgang1_schritt1_erledigt"> erledigt </option>      \n      </select>\n      <br> <br>\n      Kostenvoranschläge einholen: 1. <input> 2. <input> 3. <input>       \n    </p>       \n    <p style="border: solid thin black;padding:4px;">       Schritt 2     \n      <select id="eF_Vorgang1_schritt2">       \n        <option id="eF_Vorgang1_schritt2_unerledigt"> unerledigt </option>\n        <option id="eF_Vorgang1_schritt2_uebersprungen"> uebersprungen </option> \n        <option id="eF_Vorgang1_schritt2_erledigt"> erledigt </option>      \n      </select> \n      <br> <br> \n      Dateiprüfung      \n    </p>     \n    <p style="border: solid thin black;padding:4px;">  \n      Schritt 3      \n      <select id="eF_Vorgang1_schritt3"> \n        <option id="eF_Vorgang1_schritt3_unerledigt"> unerledigt </option>    \n        <option id="eF_Vorgang1_schritt3_uebersprungen"> uebersprungen </option> \n        <option id="eF_Vorgang1_schritt3_erledigt"> erledigt </option>      \n      </select>\n      <br> <br> \n      Werbung erwünscht?\n      <input type="checkbox"> Flyer  <input type="checkbox"> Plakat <input type="checkbox"> Sonstiges <br>    \n    </p>      \n    <big> Vorgang 2 </big>      \n    <select id="eF_Vorgang2"> \n      <option id="eF_Vorlauf_inBearbeitung"> in Bearbeitung </option>  \n      <option id="eF_Vorlauf_erledigt"> erledigt </option>  \n    </select>       <p style="border: solid thin black;padding:4px;">    \n    Schritt 1       \n    <select id="eF_Vorgang2_schritt1"> \n      <option id="eF_Vorgang2_schritt1_unerledigt"> unerledigt </option>  \n      <option id="eF_Vorgang2_schritt1_uebersprungen"> uebersprungen </option>    \n      <option id="eF_Vorgang2_schritt1_erledigt"> erledigt </option>     \n    </select>\n    <br> <br> \n    Druckfreigabe <input type="radio" name="druck" value="ja"> Ja  <input type="radio" name="druck" value="nein"> Nein <br>   \n    </p>       \n    <p style="border: solid thin black;padding:4px;">     \n      Schritt 2      \n      <select id="eF_Vorgang2_schritt2">  \n        <option id="eF_Vorgang2_schritt2_unerledigt"> unerledigt </option>  \n        <option id="eF_Vorgang2_schritt2_uebersprungen"> uebersprungen </option>   \n        <option id="eF_Vorgang2_schritt2_erledigt"> erledigt </option>   \n      </select>\n      <br> <br>     \n      Veröffentlichung in Opus   \n    </p> \n    Die Optionelemente sind durch das Attribut id eindeutig identifiziert. Dadurch kann man den Status eines Schittes oder Vorgangs über die Suche abfragen. So hat beispielsweise der Status des Schritt 3 vom Vorgang 1 die id "eF_Vorgang1_schritt1". Um alle Dokumente zu finden bei denen der 3. Schritt unerledigt ist muss folgender suchstring abgesetzt werden. <br> \n    eF_Vorgang1_schritt1=unerledigt        \n    Da solche Suchstring nur schwer zu formulieren sind bietet eFormular an, solche Suchen vorher zu denfinieren.                 \n  </div>  \n</form>', 'Demoform 2', 3, 262, NULL, 'Marco Winkler');
INSERT INTO `Formular` (`id`, `html`, `title`, `version`, `prevVersion`, `nextVersion`, `editor`) VALUES (1436, '<form action="" class="eFormular">\n  <h1>\n    Demonstrationsformular 3</h1>\n  <p>\n    In diesem Formular werden die Möglichkeiten durch die Workflowkomponente beschrieben</p>\n  <h2>\n    Einführung</h2>\n  <p>\n    Die Workflowkomponente beinhaltet eine Vielzahl von Makros, mit denen man einzelne Selectboxen in das Dokument einbetten kann, mit denen der Zustand der jeweiligen Arbeitsschritte angeben kann. Es gibt die 4 Zustände.</p>\n  <h2>    Verwendung</h2>\n  <p>\n    Die Makros werden in dem Dokuemnt in Prozentzeichen angegeben. Es gibt folgende Makros:</p>\n  <ul>\n    <li>\n      Wurzelelement</li>\n    <li>\n      Knotenelement</li>\n    <li>\n      Blattelement mit Angabe des Bearbeiters</li>\n  </ul>\n</form>\n', 'Demoform 3', 4, 240, NULL, 'Marco Winkler');
INSERT INTO `Formular` (`id`, `html`, `title`, `version`, `prevVersion`, `nextVersion`, `editor`) VALUES (1435, '<script type="text/javascript">   \n  function eF_API_onLoadFormular() {\n    try {       \n      var value = eF_API_getValueByFormulartyp("Demoform 1","ef_Demoform1_Textfeld");\n      if (value == null) value = "";\n      document.getElementById("ef_Demoform4_feld1").value=value;\n      \n      \n      var Autor= eF_API_getValueByFormulartyp("01_Projektbasisdaten","eF-id-Autor-Name");\n      if (Autor == null) Autor = "";\n      Mailtext = "Druckerei: docupoint GmbH Magdeburg \\n\\n";\n      Mailtext += "Autor: "+Autor+"\\n";\n      Mailtext += "Titel: \\n";\n      Mailtext += "Reihe:\\n";\n      Mailtext += "ISBN \\n\\n";\n      Mailtext += "Hier die Daten des Auftrags:\\n\\n";\n      Mailtext += "Format:  mm \\n";\n      Mailtext += "Umfang: 4/ Seiten\\n\\n";\n      Mailtext += "Material: Inhalt \\n";\n      Mailtext += "Druck: Inhalt \\n";\n      Mailtext += "XXX S. 1-farbig, \\n";\n      Mailtext += "XX S. 4-farbig \\n";\n      Mailtext += "Farbige Seiten: S. XXX\\n\\n";\n      Mailtext += "Umschlag: 4/0- farbig, Folienkaschierung \\n";\n      Mailtext += "Umschlagmaterial: \\n";\n      Mailtext += "Verarbeitung: Klebebindung, Buchblock in genuteten Umschlag einhängen,\\n";\n      Mailtext += "einzeln einschweißen\\n";\n      Mailtext += "Auflage:  Ex.\\n";\n      Mailtext += "Vorlagen: pdf-Dateien\\n\\n";\n      Mailtext += "Buchblock: \\n\\n";\n      Mailtext += "(ohne Beschnittzugabe und Schnittmarken)\\n";\n      Mailtext += " Umschlag: \\n\\n";\n      Mailtext += "(mit 3 mm Beschnittzugabe ohne Schnittmarken)\\n\\n";\n      Mailtext += "Besondere Hinweise:\\n\\n\\n";\n      Mailtext += "Wir bitten zunächst wie üblich um ein Ansichtsexemplar.\\n";\n      \n            \n      var mailaddr = eF_API_getValueByFormulartyp("01_Projektbasisdaten","eF-id-E-Mail-Ansprechpartner");\n      document.getElementById("ef_Maillink").href="mailto:"+mailaddr +"?body="+encodeURIComponent(Mailtext); \n     } catch (e) {\n       alert ("Formular nicht erfolgreich geladen. (Referenzformular/e nicht vorhanden)\\n"+e) ;   \n    }\n  }\n</script> \n<form class="eFormular">   \n  <h1>     Demonstrationsformular 4</h1>  \n  <p>     In diesem Formular wird die API demonstriert</p> \n  <p>     Das folgende Feld wird mit dem Wert des ersten Feldes vom Demoform1, das sich im selben Ordner befindet, gefüllt</p> \n  <input id="ef_Demoform4_feld1" disabled="disabled"/>\n  <p>\n      Dazu kann der Programmierer die Funktion eF_API_onLoadFormular("Demoform 1","ef_Demoform1_Textfeld") in seinem Formular programmieren. Diese wird nach dem Laden des Formulars aufgerufen\n  </p>\n  StandardMail:\n  <a id="ef_Maillink"> Send Mail  </a>\n</form>\n', 'Demoform 4', 23, 330, NULL, 'Marco Winkler');
